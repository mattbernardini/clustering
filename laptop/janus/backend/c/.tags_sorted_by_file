!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
initCluster	cluster.cc	/^Cluster initCluster (Cluster self)$/;"	f
CLUSTER_H_	cluster.h	13;"	d
Cluster	cluster.h	/^typedef struct _cluster * Cluster;$/;"	t	typeref:struct:_cluster
_cluster	cluster.h	/^struct _cluster$/;"	s
baseDensity	cluster.h	/^	floatType baseDensity;$/;"	m	struct:_cluster
densities	cluster.h	/^	floatType * densities;$/;"	m	struct:_cluster
edges	cluster.h	/^{	std::forward_list<Edge> * edges;$/;"	m	struct:_cluster
id	cluster.h	/^	int id;$/;"	m	struct:_cluster
mapNum	cluster.h	/^	int mapNum;$/;"	m	struct:_cluster
vertMatrix	cluster.h	/^	floatType * vertMatrix;$/;"	m	struct:_cluster
vertex_map	cluster.h	/^  	std::forward_list<Vmap> * vertex_map;$/;"	m	struct:_cluster
verticies	cluster.h	/^	std::forward_list<Vertex> * verticies;$/;"	m	struct:_cluster
getOther	edge.c	/^struct _vertex * getOther(struct _edge * self, struct _vertex * vertex)$/;"	f
id	edge.c	/^static int id = 0;$/;"	v	file:
initEdge	edge.c	/^struct _edge * initEdge($/;"	f
Edge	edge.h	/^typedef struct _edge * Edge;$/;"	t	typeref:struct:_edge
SRC_EDGE_H_	edge.h	9;"	d
_edge	edge.h	/^struct _edge$/;"	s
getOther	edge.h	/^	struct _vertex * (*getOther)(struct _edge * self, struct _vertex * vertex);$/;"	m	struct:_edge	typeref:struct:_edge::getOther
id	edge.h	/^	int id;$/;"	m	struct:_edge
source	edge.h	/^	struct _vertex * source;$/;"	m	struct:_edge	typeref:struct:_edge::_vertex
target	edge.h	/^	struct _vertex * target;$/;"	m	struct:_edge	typeref:struct:_edge::_vertex
weight	edge.h	/^	float weight;$/;"	m	struct:_edge
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
appendNode	linked_list.c	/^Node appendNode(struct list * self, void * data)$/;"	f
deleteNode	linked_list.c	/^Node deleteNode(struct list * self, void * data, bool (*compare_function)(void *, void*))$/;"	f
getLengthOfList	linked_list.c	/^int getLengthOfList(struct list * self)$/;"	f
getNodeAt	linked_list.c	/^Node getNodeAt(struct list * self, int index)$/;"	f
Node	linked_list.h	/^typedef struct list * Node;$/;"	t	typeref:struct:list
SRC_LINKED_LIST_H_	linked_list.h	9;"	d
data	linked_list.h	/^	void * data;$/;"	m	struct:list
list	linked_list.h	/^struct list {$/;"	s
next	linked_list.h	/^	struct list * next;$/;"	m	struct:list	typeref:struct:list::list
getEdgeWeightTotal	vertex.c	/^float getEdgeWeightTotal (struct _vertex * self)$/;"	f
id	vertex.c	/^static int id = 0;$/;"	v	file:
initVertex	vertex.c	/^struct _vertex * initVertex($/;"	f
SRC_VERTEX_H_	vertex.h	12;"	d
Vertex	vertex.h	/^typedef struct _vertex * Vertex;$/;"	t	typeref:struct:_vertex
_vertex	vertex.h	/^struct _vertex$/;"	s
clusterId	vertex.h	/^	int clusterId;$/;"	m	struct:_vertex
edges	vertex.h	/^	std::forward_list<Edge> edges;$/;"	m	struct:_vertex
getEdgeWeightTotal	vertex.h	/^	float (*getEdgeWeightTotal)(struct _vertex * self);$/;"	m	struct:_vertex
id	vertex.h	/^	int id;$/;"	m	struct:_vertex
label	vertex.h	/^	char * label;$/;"	m	struct:_vertex
weight	vertex.h	/^	double weight;$/;"	m	struct:_vertex
SRC_C_VMAP_H_	vmap.h	9;"	d
Vmap	vmap.h	/^typedef struct _vmap * Vmap;$/;"	t	typeref:struct:_vmap
_vmap	vmap.h	/^struct _vmap$/;"	s
arryLoc	vmap.h	/^	int arryLoc;$/;"	m	struct:_vmap
id	vmap.h	/^	int id;$/;"	m	struct:_vmap
id	vmap.h	/^static int id = 0;$/;"	v
initVmap	vmap.h	/^Vmap initVmap(int arrayLoc, int vertexId)$/;"	f
vertexId	vmap.h	/^	int vertexId;$/;"	m	struct:_vmap
